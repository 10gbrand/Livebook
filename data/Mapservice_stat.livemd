# Mapservice_stat

```elixir
Mix.install([
  {:kino_db, "~> 0.2.1"},
  {:exqlite, "~> 0.11.0"},
  {:kino_vega_lite, "~> 0.1.7"},
  {:ecto, "~> 3.7.1"},
  {:explorer, "~> 0.5.0"},
  {:vega_lite, "~> 0.1.7"},
  {:kino_explorer, "~> 0.1.7"}
])
```

## Ansluter till databasen:

Skapar connection mot databasen

<!-- livebook:{"attrs":{"database_path":"/data/db/mapservice_stat.sqlite","type":"sqlite","variable":"conn"},"chunks":null,"kind":"Elixir.KinoDB.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
opts = [database: "/data/db/mapservice_stat.sqlite"]
{:ok, conn} = Kino.start_child({Exqlite, opts})
```

```elixir
sql = "select * from VY_020_MAPSERVICE_STAT_CALC"
```

```elixir
require Explorer.DataFrame, as: DF

all_data =
  Exqlite.query!(conn, sql, [])
  |> DF
```

Tar bort extermvÃ¤rden

```elixir
mapservice_stat_exl_outlier =
  all_data
  |> DF.filter(col("RESPONSETIME") < 600.00)

IO.puts("Filtrerar")
```

Filtrera fram analyserade Folders

<!-- livebook:{"attrs":{"assign_to":null,"data_frame":"mapservice_stat","data_frame_alias":"Elixir.DF","is_data_frame":null,"missing_require":null,"operations":[{"active":true,"columns":["FOLDER"],"data_options":{"#":"integer","ABS_KLASS":"integer","ABS_KLASS_L":"string","BB":"string","DAY":"integer","FOLDER":"string","HOUR":"integer","ID":"integer","KLASS":"integer","KLASS_L":"string","NAME":"string","PROC_KLASS":"integer","PROC_KLASS_L":"string","RESPONSETIME":"float","TIME":"float","TIME_BIN":"string","TYP":"string","WEEKDAY":"string","avg_FOLDER":"float","avg_FOLDER_day":"float","avg_service":"float","avg_service_day":"float","max_FOLDER":"float","max_FOLDER_day":"float","max_service":"float","max_service_day":"float","proc_av_avg_service":"integer","proc_av_avg_service_day":"integer","stdev_FOLDER":"float","stdev_FOLDER_day":"float","stdev_service":"float","stdev_service_day":"float"},"operation_type":"group_by"},{"active":true,"data_options":{"#":"integer","ABS_KLASS":"integer","ABS_KLASS_L":"string","BB":"string","DAY":"integer","FOLDER":"string","HOUR":"integer","ID":"integer","KLASS":"integer","KLASS_L":"string","NAME":"string","PROC_KLASS":"integer","PROC_KLASS_L":"string","RESPONSETIME":"float","TIME":"float","TIME_BIN":"string","TYP":"string","WEEKDAY":"string","avg_FOLDER":"float","avg_FOLDER_day":"float","avg_service":"float","avg_service_day":"float","max_FOLDER":"float","max_FOLDER_day":"float","max_service":"float","max_service_day":"float","proc_av_avg_service":"integer","proc_av_avg_service_day":"integer","stdev_FOLDER":"float","stdev_FOLDER_day":"float","stdev_service":"float","stdev_service_day":"float"},"direction":"asc","operation_type":"sorting","sort_by":"FOLDER"},{"active":true,"columns":["#"],"data_options":{"#":"integer","ABS_KLASS":"integer","ABS_KLASS_L":"string","BB":"string","DAY":"integer","FOLDER":"string","HOUR":"integer","ID":"integer","KLASS":"integer","KLASS_L":"string","NAME":"string","PROC_KLASS":"integer","PROC_KLASS_L":"string","RESPONSETIME":"float","TIME":"float","TIME_BIN":"string","TYP":"string","WEEKDAY":"string","avg_FOLDER":"float","avg_FOLDER_day":"float","avg_service":"float","avg_service_day":"float","max_FOLDER":"float","max_FOLDER_day":"float","max_service":"float","max_service_day":"float","proc_av_avg_service":"integer","proc_av_avg_service_day":"integer","stdev_FOLDER":"float","stdev_FOLDER_day":"float","stdev_service":"float","stdev_service_day":"float"},"operation_type":"summarise","query":"count"}]},"chunks":null,"kind":"Elixir.KinoExplorer.DataTransformCell","livebook_object":"smart_cell"} -->

```elixir
mapservice_stat
|> Explorer.DataFrame.new()
|> DF.group_by("FOLDER")
|> DF.arrange(asc: col("FOLDER"))
|> DF.summarise("#_count": count(col("#")))
```

<!-- livebook:{"attrs":{"assign_to":"mapservice_stat_exl_outlier_filter_by_folder","data_frame":"mapservice_stat_exl_outlier","data_frame_alias":"Elixir.DF","is_data_frame":null,"missing_require":null,"operations":[{"active":true,"column":"FOLDER","data_options":{"#":"integer","ABS_KLASS":"integer","ABS_KLASS_L":"string","BB":"string","DAY":"integer","FOLDER":"string","HOUR":"integer","ID":"integer","KLASS":"integer","KLASS_L":"string","NAME":"string","PROC_KLASS":"integer","PROC_KLASS_L":"string","RESPONSETIME":"float","TIME":"float","TIME_BIN":"string","TYP":"string","WEEKDAY":"string","avg_FOLDER":"float","avg_FOLDER_day":"float","avg_service":"float","avg_service_day":"float","max_FOLDER":"float","max_FOLDER_day":"float","max_service":"float","max_service_day":"float","proc_av_avg_service":"integer","proc_av_avg_service_day":"integer","stdev_FOLDER":"float","stdev_FOLDER_day":"float","stdev_service":"float","stdev_service_day":"float"},"datalist":[null,"Fakta","MetriaMapsBakgrund","MetriaMapsFastighet","MetriaMapsOrto","Rask","Rask_v2","Skogsvardsportal_extern","TrionaVFS"],"filter":"equal","message":null,"operation_type":"filters","type":"string","value":"Fakta"}]},"chunks":null,"kind":"Elixir.KinoExplorer.DataTransformCell","livebook_object":"smart_cell"} -->

```elixir
mapservice_stat_exl_outlier_filter_by_folder =
  mapservice_stat_exl_outlier
  |> Explorer.DataFrame.new()
  |> DF.filter(col("FOLDER") == "Fakta")
```

```elixir
mapservice_stat_exl_outlier_filter_by_folder
|> DF.group_by("NAME")
|> DF.summarise(
  RESPONSETIME_mean: mean(col("RESPONSETIME")),
  RESPONSETIME_median: median(col("RESPONSETIME")),
  RESPONSETIME_max: max(col("RESPONSETIME"))
)
|> DF.arrange(desc: col("RESPONSETIME_mean"))
```

<!-- livebook:{"attrs":{"chart_title":"test","height":300,"layers":[{"active":true,"chart_type":"point","color_field":null,"color_field_aggregate":null,"color_field_bin":null,"color_field_scale_scheme":null,"color_field_type":null,"data_variable":"mapservice_stat_exl_outlier_filter_by_folder","geodata_color":"blue","latitude_field":null,"longitude_field":null,"x_field":"DAY","x_field_aggregate":null,"x_field_bin":null,"x_field_scale_type":null,"x_field_type":"quantitative","y_field":"RESPONSETIME","y_field_aggregate":null,"y_field_bin":null,"y_field_scale_type":null,"y_field_type":"quantitative"}],"vl_alias":"Elixir.VegaLite","width":600},"chunks":null,"kind":"Elixir.KinoVegaLite.ChartCell","livebook_object":"smart_cell"} -->

```elixir
VegaLite.new(width: 600, height: 300, title: "test")
|> VegaLite.data_from_values(mapservice_stat_exl_outlier_filter_by_folder,
  only: ["DAY", "RESPONSETIME"]
)
|> VegaLite.mark(:point)
|> VegaLite.encode_field(:x, "DAY", type: :quantitative)
|> VegaLite.encode_field(:y, "RESPONSETIME", type: :quantitative)
```

## Section
