<!-- livebook:{"app_settings":{"access_type":"public","auto_shutdown_ms":3600000,"slug":"Mapservice-stats"}} -->

# Mapservice_stat

```elixir
Mix.install([
  {:kino_db, "~> 0.2.1"},
  {:exqlite, "~> 0.11.0"},
  {:kino_vega_lite, "~> 0.1.7"},
  {:ecto, "~> 3.7.1"},
  {:explorer, "~> 0.5.0"},
  {:vega_lite, "~> 0.1.7"},
  {:kino_explorer, "~> 0.1.7"},
  {:kino_maplibre, "~> 0.1.7"}
])
```

## Hämtar data

Skapar connection mot databasen och hämtar data

```elixir
require Explorer.DataFrame, as: DF

## Ansluter till Sqlite
opts = [database: "/data/db/mapservice_stat.sqlite"]
{:ok, conn} = Kino.start_child({Exqlite, opts})

sql = "select * from VY_020_MAPSERVICE_STAT_CALC where responsetime < 1000"
all_data = Exqlite.query!(conn, sql, [])
IO.puts("Data laddat i dataram")
```

```elixir
all_data
|> Explorer.DataFrame.new()
|> DF.group_by("FOLDER")
|> DF.summarise(Count: count(col("NAME")))
```

```elixir
folder = Kino.Input.text("Folder")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
filtered_folder = Kino.Input.read(folder)

data_folderfilter =
  all_data
  |> Explorer.DataFrame.new()
  |> DF.filter(col("FOLDER") == ^filtered_folder)

sum_data_folderfilter =
  data_folderfilter
  |> Explorer.DataFrame.new()
  |> DF.group_by("FOLDER")
  |> DF.summarise(
    RESPONSETIME_mean: mean(col("RESPONSETIME")),
    RESPONSETIME_median: median(col("RESPONSETIME")),
    RESPONSETIME_max: max(col("RESPONSETIME"))
  )
  |> DF.arrange(desc: col("RESPONSETIME_mean"))
```

## Visa staistik för vald mapp

Medelsvarstider per tjänst

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
sum_data_folderfilter =
  data_folderfilter
  |> Explorer.DataFrame.new()
  |> DF.group_by("NAME")
  |> DF.summarise(
    RESPONSETIME_mean: mean(col("RESPONSETIME")),
    RESPONSETIME_median: median(col("RESPONSETIME")),
    RESPONSETIME_max: max(col("RESPONSETIME"))
  )
  |> DF.arrange(desc: col("RESPONSETIME_mean"))

VegaLite.new(height: 600, width: 600)
|> VegaLite.data_from_values(sum_data_folderfilter)
|> VegaLite.mark(:bar, tooltip: true)
## |> VegaLite.mark(:point)
|> VegaLite.encode_field(:x, "NAME", type: :nominal)
|> VegaLite.encode_field(:y, "RESPONSETIME_mean", type: :quantitative)
|> VegaLite.encode_field(:color, "RESPONSETIME_max", type: :quantitative)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new(height: 600, width: 600)
|> VegaLite.data_from_values(data_folderfilter)
|> VegaLite.mark(:tick)
|> VegaLite.encode_field(:x, "DAY", type: :nominal)
|> VegaLite.encode_field(:y, "RESPONSETIME", type: :quantitative)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new(height: 600, width: 600)
|> VegaLite.data_from_values(data_folderfilter)
|> VegaLite.mark(:tick)
|> VegaLite.encode_field(:x, "HOUR", type: :nominal)
|> VegaLite.encode_field(:y, "RESPONSETIME", type: :quantitative)

## |> VegaLite.encode_field(:color, "RESPONSETIME_max", type: :quantitative)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new(height: 300, width: 300)
|> VegaLite.data_from_values(data_folderfilter)
|> VegaLite.mark(:bar, tooltip: true)
|> VegaLite.encode_field(:x, "RESPONSETIME",
  type: :quantitative,
  bin: true,
  title: "Svarstider i sek"
)
|> VegaLite.encode(:y, aggregate: :count)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
data_folderfilter_under_10 =
  data_folderfilter
  |> Explorer.DataFrame.new()
  |> DF.filter(col("RESPONSETIME") < 10)

VegaLite.new(height: 300, width: 300)
|> VegaLite.data_from_values(data_folderfilter_under_10)
|> VegaLite.mark(:bar, tooltip: true)
|> VegaLite.encode_field(:x, "RESPONSETIME",
  type: :quantitative,
  bin: true,
  title: "Svarstider i sek"
)
|> VegaLite.encode(:y, aggregate: :count)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new()
|> VegaLite.concat([
  VegaLite.new()
  |> VegaLite.data_from_values(data_folderfilter)
  |> VegaLite.mark(:bar)
  |> VegaLite.encode_field(:x, "RESPONSETIME",
    type: :quantitative,
    bin: true,
    title: "Svarstider i sek, alla värden"
  )
  |> VegaLite.encode(:y, aggregate: :count),
  VegaLite.new()
  |> VegaLite.data_from_values(data_folderfilter_under_10)
  |> VegaLite.mark(:bar)
  |> VegaLite.encode_field(:x, "RESPONSETIME",
    type: :quantitative,
    bin: true,
    title: "Svarstider i sek, under 10 sek"
  )
  |> VegaLite.encode(:y, aggregate: :count)
])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
sum_data_folderfilter_day =
  data_folderfilter
  |> Explorer.DataFrame.new()
  |> DF.group_by(["NAME", "DAY"])
  |> DF.summarise(
    RESPONSETIME_mean: mean(col("RESPONSETIME")),
    RESPONSETIME_median: median(col("RESPONSETIME")),
    RESPONSETIME_max: max(col("RESPONSETIME"))
  )
  |> DF.arrange(desc: col("RESPONSETIME_mean"))
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new()
|> VegaLite.data_from_values(sum_data_folderfilter_day)
|> VegaLite.repeat(
  ["RESPONSETIME_mean", "RESPONSETIME_max"],
  VegaLite.new()
  |> VegaLite.mark(:line)
  |> VegaLite.encode_field(:x, "DAY", type: :nominal)
  |> VegaLite.encode_repeat(:y, :repeat, type: :quantitative)
  |> VegaLite.encode_field(:color, "NAME")
)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new(columns: 2)
|> VegaLite.data_from_values(sum_data_folderfilter_day)
|> VegaLite.facet(
  [field: "NAME"],
  VegaLite.new(height: 200, width: 350)
  |> VegaLite.mark(:line, tooltip: true)
  |> VegaLite.encode_field(:x, "DAY", type: :nominal)
  |> VegaLite.encode_field(:y, "RESPONSETIME_mean", type: :quantitative)
  ## |> VegaLite.encode_field(:color, "NAME")
)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
VegaLite.new(columns: 1)
|> VegaLite.data_from_values(sum_data_folderfilter_day)
|> VegaLite.facet(
  [field: "NAME"],
  VegaLite.new(columns: 2)
  |> VegaLite.repeat(
    ["RESPONSETIME_mean", "RESPONSETIME_max"],
    VegaLite.new()
    |> VegaLite.mark(:line, tooltip: true)
    |> VegaLite.encode_field(:x, "DAY", type: :nominal)
    |> VegaLite.encode_repeat(:y, :repeat, type: :quantitative)
    ## |> VegaLite.encode_field(:color, "NAME")
  )
)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
MapLibre.new()
|> MapLibre.add_table_source(
  "data_folderfilter",
  data_folderfilter,
  {:lng_lat, ["LON", "LAT"]}
)
|> MapLibre.add_layer(
  id: "data_folderfilter_circle_1",
  source: "data_folderfilter",
  type: :circle,
  paint: [circle_color: "#000000", circle_radius: 4, circle_opacity: 1]
)
```
